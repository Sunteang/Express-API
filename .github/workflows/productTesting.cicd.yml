name: CI/CD Pipeline for Service

on:
  pull_request:
    branches: [main]

  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures all branches and tags are fetched, useful for versioning or other git-related operations

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: yarn install

      - name: Run build
        env:
          PORT: ${{ secrets.PORT }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
        run: yarn build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-build
          path: ./build

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: artifact-build
  #         path: ./build

  #     - name: Prepare Deployment Directories
  #       uses: appleboy/ssh-action@master # SSH into the server to prepare directories
  #       with:
  #         host: ${{ secrets.SERVER_IP }} # Server IP address from secrets
  #         username: ${{ secrets.SERVER_USERNAME }} # Server username from secrets
  #         key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH private key from secrets
  #         port: 22 # SSH port, usually 22
  #         script: |
  #           mkdir -p /home/ubuntu/apps/build  # Change to match your desire directory structure
  #           mkdir -p /home/ubuntu/apps/build/configs  # For additional configuration files

  #     - name: Copy files to Server
  #       uses: appleboy/scp-action@master # Copies files to the server using SCP
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 22
  #         source: "./path/to/artifacts/*"
  #         target: "/home/ubuntu/apps/build"
  #         strip_components: 1 # Adjust based on the directory depth of the source

  #     - name: Create .env File
  #       uses: appleboy/ssh-action@master # Creates an environment variable file on the server
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 22
  #         script: |
  #           echo "NODE_ENV=production" > /path/to/deployment/directory/build/.env
  #           echo "PORT=your_port_number" >> /path/to/deployment/directory/build/.env
  #           echo "DATABASE_URL=your_database_url" >> /path/to/deployment/directory/build/.env

  #     - name: Install Dependencies and Restart Application
  #       uses: appleboy/ssh-action@master # Installs dependencies and restarts the application using a process manager
  #       with:
  #         host: ${{ secrets.SERVER_IP }}
  #         username: ${{ secrets.SERVER_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 22
  #         script: |
  #           cd /path/to/deployment/directory/build
  #           yarn install --production
  #           # Assume PM2 is used, Replace with other command for other process manager
  #           # Assume you have script for run start in production and restart in production
  #           # Check if the PM2 process is running
  #           if pm2 show your-service-name > /dev/null; then
  #             echo "Application is running. Restarting..."
  #             yarn restart
  #           else
  #             echo "Application is not running. Starting..."
  #             yarn start
  #           fi
